
Implementation notes:

- added the .rvmrc file with 'deal' gemset, removed the .gitignore entry for this file
- added the reset_dbs.sh bash shell script for my development productivity
- added the simplecov gem for test code coverage reporting
- the tests are executed with commands  'bundle exec rake test' and 'bundle exec rake test:units'
- the server is started with 'bundle exec rails s'

- execute script ./reset_dbs.sh to setup the databases.

- execute the following rake task to import the deals csv file:
  rake deals:import_deals csv_data_filename=script/data/daily_planet_export.csv publisher_id=3

Story 1:

  Added eager model loading in DealsController to make the sql more efficient,
  thus greatly increasing page-rendering speed.  We could consider model caching in
  a future iteration.

  @deals = Deal.find :all, :include => [{:advertiser => :publisher}]

Story 2:

  Created the 'app/themes/entertainment' directory structure with generic content.

  Added method 'Publisher.root_entertainment_publisher_id' to check if the publisher
  is a generic or a customized one.

  Modified the DealsController 'set_view_paths' method to use either the generic or
  a customized theme, based on the current Publisher.  The customized theme for Publisher
  WCAX, for example, is retained.

  def set_view_paths
    if @deal.advertiser.publisher == Publisher.root_entertainment_publisher_id
      # use a new generic theme for all entertainment publishers
      @publisher_name = @deal.advertiser.publisher.name
      prepend_view_path "app/themes/entertainment/views"
    else
      # use a custom theme for non-entertainment publishers
      prepend_view_path "app/themes/#{@deal.advertiser.publisher.theme}/views"
    end
  end

Story 3:

  The previous tests in test/unit/deal_test.rb tried to use an overly-precise end_at value with:
  end_at => Time.zone.now + 0.01

  Also, the 'sleep 1' was removed as the use of sleep slows down the tests, and are generally unnecessary.
  The new tests are as follows:

  test "deal.over? should return false for unexpired deals" do
    deal = FactoryGirl.create(:deal, :end_at => 2.seconds.from_now)
    assert (deal.over? == false), "Deal should not be over"
  end

  test "deal.over? should return true for expired deals" do
    deal = FactoryGirl.create(:deal, :end_at => 2.seconds.ago)
    assert (deal.over?), "Deal should be over"
  end

Story 4:

  Added the following files:

  new file:   app/utils/deal_importer.rb
  new file:   config/alt_csv_file_format.json
  new file:   config/csv_file_format.json
  new file:   lib/tasks/deals.rake
  new file:   script/data/daily_planet_export.csv
  new file:   test/unit/deal_importer_test.rb

  The format of data file 'daily_planet_export.txt' isn't sufficiently normalized to ensure reliable
  data parsing and data importation.  Therefore, the data format has been changed to csv - see file
  'daily_planet_export.csv'.

  The "standard format" of deal import data files is externalized in file 'config/csv_file_format.json'.
  This file allows us to externalize, rather than hard-code, the format of the csv file regarding
  its field indices and field datatypes.  This file is generated by 'rake deals:gen_config_file'.

  Additionally, based on real-world experience, vendors and third parties typically are reluctant
  to conform to "standard" csv file formats - they tend to provide the csv files in their own
  particular format.  Therefore, I added functionality to allow the use of alternative csv file
  formats; see file 'config/alt_csv_file_format.json' as an example, with two column indices altered.

  Also, based on experience, it's generally best to have the ability to "scan" an import file before
  actually importing its data.  Therefore, there are similar rake tasks for scanning and importing.
  For example:
    rake deals:scan_deals csv_data_filename=script/data/daily_planet_export.csv publisher_id=3
    rake deals:import_deals csv_data_filename=script/data/daily_planet_export.csv publisher_id=3

  In addition to creating Deal models, the additional new Advertiser models that are encountered by
  the imported are created in the database.  The rake task requires a publisher_id paramater so as
  to create the Advertisers, and Deals, under the correct associated Publisher.

  The functionality of these rake tasks is implemented in class DealImporter.  The tests for this
  class is in test/unit/deal_importer_test.rb.

