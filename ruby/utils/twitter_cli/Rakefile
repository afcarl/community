#!/usr/bin/env rake

require 'cgi'
require 'json'
require 'net/http'

namespace :twitter do

  desc "Ad-hoc search"
  task :search do
    TwitterSearchApiProcessor.new.search
  end

  desc "User name query"
  task :user_name_query do
    TwitterSearchApiProcessor.new.user_name_query
  end

  desc "User ID query"
  task :user_id_query do
    TwitterSearchApiProcessor.new.user_id_query
  end

  desc "Followers query"
  task :followers_query do
    TwitterSearchApiProcessor.new.followers_query
  end

end

class TwitterSearchApiProcessor

  attr_accessor :config

  def initialize
    @config = load_config
  end

  def load_config
    config_file = 'config/twitter_cli.yml'
    begin
      YAML::load(File.open(config_file))
    rescue Exception => e
      puts "Error loading #{config_file} - #{e.class.name} - #{e.message}"
      {}
    end
  end

  def cl_arg
    ENV['q']
  end
  
  def verbose?
    ENV['v'].to_s == 'true'
  end
  
  def search_url
    config['search_url'].strip
  end

  def search
    return if config.nil?
    begin
      params = {'q' => cl_arg }
      raw = http_get(search_url, params)
      puts "raw response: #{raw}" if verbose?
      obj = JSON.parse(raw)
      puts to_pretty_json(obj)
    rescue Exception => e
      handle_exception(e)
    end
  end

  def user_name_query(screen_names, adhoc=false)
    return if config.nil?
    begin
      url = "#{@user_lookup_url}#{@consumer_key}&screen_name=#{URI.escape(screen_names)}"
    rescue Exception => e
      handle_exception('user_name_query', e)
    end
  end

  def user_id_query(user_id, adhoc=false)
    return if config.nil?
    begin
      url = "#{@user_id_lookup_url}#{user_id}"
    rescue Exception => e
      handle_exception('user_id_query', e)
    end
  end

  def followers_query(screen_name, adhoc=false, cursor=-1)
    return if config.nil?
    # curl -v 'http://api.twitter.com/1/users/lookup.format?user_id='
    begin
      url = "#{@followers_url}#{cursor}&screen_name=#{URI.escape(screen_name)}"
    rescue Exception => e
      handle_exception('followers_query', e)
    end
  end

  private

  def http_get(url, params={})
    begin
      qstr = build_query_string(params)
      uri  = URI("#{url}#{qstr}")
      Net::HTTP.get(uri)
    rescue Exception => e
      handle_exception(e)
      nil
    end
  end

  def build_query_string(params={})
    sio = StringIO.new
    params.keys.sort.each_with_index { | name, idx |
      (idx == 0) ? c = '?' : c = '&'
      sio << "#{c}#{name}=#{CGI.escape(params[name])}"
    }
    sio.string
  end

  def handle_exception(e)
    puts "Exception => #{e.class.name} #{e.message}"
    puts e.backtrace
  end

  def to_json(obj)
    JSON.generate(obj)
  end

  def to_pretty_json(obj)
    JSON.pretty_generate(obj)
  end

  def log_pretty_json(obj)
    puts to_pretty_json(obj)
  end

  def parse_json(json_str)
    (json_str) ? JSON.parse(json_str) : nil
  end

  def plus_escape(desc)
    desc.tr(' ','+')
  end

  def write_file(out_name, content)
    out = File.new out_name, "w+"
    out.write content
    out.flush
    out.close
    puts "file written: #{out_name}"
  end

  def write_lines(out_name, lines)
    sio = StringIO.new
    lines.each { | line | sio << "#{line}\n" }
    write_file(out_name, sio.string)
  end

end
