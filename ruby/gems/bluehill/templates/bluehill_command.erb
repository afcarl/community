package <%= @command_package %> 
{
    import mx.rpc.IResponder;
    import mx.rpc.events.ResultEvent;
    import mx.rpc.events.FaultEvent;
<% if @command_service_name.size > 0 %>
    import mx.rpc.http.HTTPService;
    import com.adobe.cairngorm.business.ServiceLocator;
<% end %>
    import com.adobe.cairngorm.commands.ICommand;
    import com.adobe.cairngorm.control.CairngormEvent;

<% if @delegate_classname %>
    import <%= @delegate_package %>.<%= @delegate_classname %>;
<% end %>
    import <%= @command_package %>.<%= @commands_superclass %>; 
    import <%= @event_package %>.<%= @event_subclassname %>;
    import <%= @model_package %>.<%= @model_locator_classname %>;
    import <%= @util_package %>.*;

    /**
     * This Command handles the CairngormEvent named '<%= @event_name %>'.
     *
     * Generated by Bluehill - OVERWRITE 
     */
    public class <%= @command_subclassname %> extends <%= @commands_superclass %> implements ICommand, IResponder {

        // Instance variables:
        private var cairngormEvent : CairngormEvent = null;

        /**
         * Constructor method.
         */
        public function <%= @command_subclassname %>() {
    
            super();
        }
    
        public function execute(cgmEvent:CairngormEvent) : void {
            
            cairngormEvent = cgmEvent;
            var appEvent : <%= @event_subclassname %> = <%= @event_subclassname %>( cairngormEvent );

            trace('<%= @command_subclassname %> execute');  

<% if @delegate_classname %>
            var delegate : <%= @delegate_classname %> = new <%= @delegate_classname %>(this, appEvent);
            delegate.execute();
<% end %>
<% if @command_service_name.size > 0 %>
            // This Command does not use a Delegate object; it invokes the HTTPService directly.
            var service : HTTPService = lookupHttpService('<%= @command_service_name %>');
            service.addEventListener('result', result); 
            service.addEventListener('fault',  fault); 
            service.send(appEvent.parameters);
<% end %>
        }

        override public function result(event:Object) : void {
 
            trace('<%= @command_subclassname %>.result ' + event.toString());
            // ServiceResultUtil.result(event, "<%= @command_subclassname %>");

            // TODO - Parse the result and set state in the model.   
            // <%= @model_locator_classname %>.setXxx
        }

        override public function fault(event:Object) : void {

            trace('<%= @command_subclassname %>.fault ' + event.toString());

            // TODO - Handle the Fault as necessary for your application.
            // ServiceResultUtil.fault(event, "<%= @command_subclassname %>");
            commonFaultHandler(event, cairngormEvent)
        }
    }
}
